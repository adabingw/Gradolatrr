type Query {
    term(id: ID!): Term, 
    terms: [Term], 
    all_courses: [Course], 
    courses(term_id: ID!): [Course], 
    course(course_id: ID!): Course, 
    all_assignments: [Assignment], 
    assignments(course_id: ID!): [Assignment], 
    assignment(assignment_id: ID!): Assignment, 
}

type Mutation {
    add_term(
        id: ID!, 
        name: String!, 
        archived: Boolean!, 
        current: Boolean!, 
        data: [DataInput]
    ): ID, 
    add_course(
        id: ID!,
        name: String!, 
        termId: ID!, 
        termName: ID!, 
        data: [DataInput], 
        contentInfo: [ContentInfoInput]
    ): String, 
    add_assignments(
        id: ID!,
        num: Int!,
        suffix: String!, 
        courseId: ID!, 
        courseName: ID!, 
        termId: ID!, 
        termName: ID!, 
        data: [DataInput]
    ): String, 
    add_assignment(
        id: ID!,
        name: String!, 
        courseId: ID!, 
        courseName: ID!, 
        termId: ID!, 
        termName: ID!, 
        data: [DataInput]
    ): String, 

    update_assignment(
        id: ID!,
        data: [DataInput]
    ): String, 
    update_course(
        id: ID!, 
        data: [DataInput], 
        contentInfo: [ContentInfoInput]
    ): String, 
    update_term(
        id: ID!, 
        data: [DataInput]
    ): String, 

    delete_assignment(id: ID!): String, 
    delete_course(id: ID!): String, 
    delete_term(id: ID!): String
}

schema {
    query: Query, 
    mutation: Mutation
}

type Assignment {
    id: ID!,
    type: String!, 
    name: String!, 
    courseId: ID!, 
    courseName: ID!, 
    termId: ID!, 
    termName: ID!, 
    data: [Data], 
    course(course_id: ID!): Course, 
    term(term_id: ID!): Term
}

type Course {
    id: ID!,
    type: String!, 
    name: String!, 
    termId: ID!, 
    termName: ID!, 
    data: [Data], 
    contentInfo: [ContentInfo]
    assignments(course_id: ID!): [Assignment], 
    term(term_id: ID!): Term
}

type Term {
    id: ID!, 
    name: String!, 
    type: String!, 
    archived: Boolean!, 
    current: Boolean!, 
    data: [Data], 
    courses(term_id: ID!): [Course]
}

type ContentInfo {
    name: String!,
    checked: Boolean!, 
    type: String!, 
    required: Boolean!, 
    order: Int!
}

type Data {
    name: String!, 
    type: String!, 
    content: DynamicType, 
    order: Int
}

input DataInput {
    name: String!, 
    type: String!, 
    content: DynamicType, 
    order: Int
}

input ContentInfoInput {
    name: String!,
    checked: Boolean!, 
    type: String!, 
    required: Boolean!, 
    order: Int!
}
